def Syntax: struct {
    def Flags: struct {
        def HIGHLIGHTNUMBERS: const 1;
        def HIGHLIGHTSTRINGS: const 2;
    };

    def getFlags: proc ext -> i32 {
        if (Externs.strcmp(ext, ".c") == 0) {
           return Flags.HIGHLIGHTNUMBERS |
                  Flags.HIGHLIGHTSTRINGS;
        };

        if (Externs.strcmp(ext, ".bam") == 0) {
           return Flags.HIGHLIGHTNUMBERS |
                  Flags.HIGHLIGHTSTRINGS;
        };

        return 0;
    };

    def getComment: proc ext -> *u8 {
        if (Externs.strcmp(ext, ".c") == 0) { return "//"; };
        if (Externs.strcmp(ext, ".h") == 0) { return "//"; };
        if (Externs.strcmp(ext, ".bam") == 0) { return "//"; };

        return null;
    };

    def getMLCommentStart: proc ext -> *u8 {
        if (Externs.strcmp(ext, ".c") == 0) { return "/*"; };
        if (Externs.strcmp(ext, ".h") == 0) { return "/*"; };


        return null;
    };
    
    def getMLCommentEnd: proc ext -> *u8 {
        if (Externs.strcmp(ext, ".c") == 0) { return "*/"; };
        if (Externs.strcmp(ext, ".h") == 0) { return "*/"; };

        return null;
    };

    def getName: proc ext -> *u8 {
        if (Externs.strcmp(ext, ".c") == 0) { return "C"; };
        if (Externs.strcmp(ext, ".h") == 0) { return "H"; };
        if (Externs.strcmp(ext, ".bam") == 0) { return "BAMBA"; };

        return null;
    };

    def getKeywords: proc ext -> *(*u8) {
        def result: var *(*u8);
        result = null;

        if (Externs.strcmp(ext, ".c") == 0 |
            Externs.strcmp(ext, ".h") == 0) {
            result = Externs.realloc(*result, (*u8).SIZE * 24);
            (*result + (*u8).SIZE * 0) = "switch";
            (*result + (*u8).SIZE * 1) = "if";
            (*result + (*u8).SIZE * 2) = "while";
            (*result + (*u8).SIZE * 3) = "for";
            (*result + (*u8).SIZE * 4) = "break";
            (*result + (*u8).SIZE * 5) = "continue";
            (*result + (*u8).SIZE * 6) = "return";
            (*result + (*u8).SIZE * 7) = "else";
            (*result + (*u8).SIZE * 8) = "struct";
            (*result + (*u8).SIZE * 9) = "union";
            (*result + (*u8).SIZE * 10) = "typedef";
            (*result + (*u8).SIZE * 11) = "static";
            (*result + (*u8).SIZE * 12) = "enum";
            (*result + (*u8).SIZE * 13) = "class";
            (*result + (*u8).SIZE * 14) = "case";
            (*result + (*u8).SIZE * 15) = "int|";
            (*result + (*u8).SIZE * 16) = "long|";
            (*result + (*u8).SIZE * 17) = "double|";
            (*result + (*u8).SIZE * 18) = "float|";
            (*result + (*u8).SIZE * 19) = "char|";
            (*result + (*u8).SIZE * 20) = "unsigned|";
            (*result + (*u8).SIZE * 21) = "signed|";
            (*result + (*u8).SIZE * 22) = "void|";
            (*result + (*u8).SIZE * 23) = null;
        };
        
        if (Externs.strcmp(ext, ".bam") == 0) {
            result = Externs.realloc(*result, (*u8).SIZE * 15);
            (*result + (*u8).SIZE * 0) = "return";
            (*result + (*u8).SIZE * 1) = "extern";
            (*result + (*u8).SIZE * 2) = "struct";
            (*result + (*u8).SIZE * 3) = "inline";
            (*result + (*u8).SIZE * 4) = "const";
            (*result + (*u8).SIZE * 5) = "import";
            (*result + (*u8).SIZE * 6) = "while";
            (*result + (*u8).SIZE * 7) = "proc";
            (*result + (*u8).SIZE * 8) = "prop";
            (*result + (*u8).SIZE * 9) = "else";
            (*result + (*u8).SIZE * 10) = "var";
            (*result + (*u8).SIZE * 11) = "if";
            (*result + (*u8).SIZE * 12) = "def|";
            (*result + (*u8).SIZE * 13) = "->|";
            (*result + (*u8).SIZE * 14) = null;
        };

        return *result;
    };

    def flags: prop i32;
    def commentStart: prop *u8;
    def mlCommentStart: prop *u8;
    def mlCommentEnd: prop *u8;
    def keywords: prop *(*u8);
    def name: prop *u8;
};

def syntax: prop Syntax;

def selectSyntax: proc self filename -> i32 {
    self.syntax.name = null;
    if (filename == null) { return 0; };

    def ext: const Externs.strrchr(filename, '.');

    if (ext == null) { return 0; };

    self.syntax.flags = Syntax.getFlags(ext);
    self.syntax.mlCommentStart = Syntax.getMLCommentStart(ext);
    self.syntax.mlCommentEnd = Syntax.getMLCommentEnd(ext);
    self.syntax.commentStart = Syntax.getComment(ext);
    self.syntax.name = Syntax.getName(ext);
    self.syntax.keywords = Syntax.getKeywords(ext);

    return 0;
};

def ERow: struct {
    def idx: prop i32;
    def size: prop i32;
    def chars: prop *u8;
    def hl: prop *u8;
    def rsize: prop i32;
    def render: prop *u8;
    def opencomment: prop u1;

    def init: proc line len -> ERow {
        def result: var ERow;

        result.size = len;
        result.chars = Externs.malloc(len + 1);
        Externs.memcpy(*result.chars, line, len);
        (*result.chars)[len] = 0;

        result.rsize = 0;
        result.render = null;
        result.hl = null;
        result.idx = 0;
        result.opencomment = 0;

        return *result;
    };

    def Highlight: struct {
        def NORMAL: const 0;
        def COMMENT: const 1;
        def MLCOMMENT: const 2;
        def KEYWORDA: const 3;
        def KEYWORDB: const 4;
        def STRING: const 5;
        def NUMBER: const 6;
        def MATCH: const 7;

        def toColor: proc hl -> i32 {
            if (hl == COMMENT) { return 36; };
            if (hl == MLCOMMENT) { return 36; };
            if (hl == KEYWORDA) { return 33; };
            if (hl == KEYWORDB) { return 32; };
            if (hl == STRING) { return 35; };
            if (hl == NUMBER) { return 31; };
            if (hl == MATCH) { return 34; };

            return 37;
        };
    };

    def update: proc rows self syntax -> i32 {
        def j: var i32;
        def idx: var i32;
        def tabs: var i32;

        j = 0;
        tabs = 0;
        while (*j < *self.size) {
            if (*(*self.chars)[*j] == '\t') {
                tabs = *tabs + 1;
            };
            j = *j + 1;
        };


        Externs.free(*self.render);
        self.render = Externs.malloc(*self.size + *tabs * (Editor.Settings.TABSIZE - 1) + 1 );

        idx = 0;
        j = 0;
        while (*j < *self.size) {
            def char: const *(*self.chars)[*j];

            if (char == '\t') {
                (*self.render)[*idx] = ' ';
                idx = *idx + 1;
                while (*idx % Editor.Settings.TABSIZE != 0) {
                    (*self.render)[*idx] = ' ';
                    idx = *idx + 1;
                };
            } else {
                (*self.render + *idx) = char;
                idx = *idx + 1;
            };
            j = *j + 1;
        };

        (*self.render + *idx) = 0;
        self.rsize = *idx;

        updateSyntax(rows, self, syntax);

        return 0;
    };

    def updateSyntax: proc rows self syntax -> i32 {
        def issep: inline ch -> i1 {
            return ch == ' ' | ch == '\t' | (ch == 0) | (Externs.strchr(",.()+-/*=~%<>[];", ch) != null);
        };

        def isdigit: proc ch -> i1 {
            return ch < '9' + 1 & ch > '0' - 1;
        };

        self.hl = Externs.realloc(*self.hl, *self.rsize);
        Externs.memset(*self.hl, Highlight.NORMAL, *self.rsize);

        def syntaxFlags: const *syntax.flags;
        def keywords: const *syntax.keywords;

        if (syntaxFlags == 0) {
            return 0;
        };

        def scs: const *syntax.commentStart;
        def mcs: const *syntax.mlCommentStart;
        def mce: const *syntax.mlCommentEnd;

        def scslen: var i32;
        def mcslen: var i32;
        def mcelen: var i32;

        if (scs != null) { scslen = Externs.strlen(scs); } else { scslen = 0; };
        if (mcs != null) { mcslen = Externs.strlen(mcs); } else { mcslen = 0; };
        if (mce != null) { mcelen = Externs.strlen(mce); } else { mcelen = 0; };

        def prevsep: var i1;
        def instring: var i8;
        def incomment: var i1;

        def i: var i32;

        prevsep = 1;
        instring = 0;
        incomment = 0;
        if (*self.idx > 0) {
            incomment = *Editor.Buffer.getRow(rows, *self.idx - 1).opencomment;
        };

        i = 0;
        while (*i < *self.rsize) {
            def char: const *(*self.render + *i);
            def prevhl: var i8;

            if (*i > 0) {
                prevhl = *(*self.hl + (*i - 1));
            } else {
                prevhl = Highlight.NORMAL;
            };

            def processed: var u1;

            processed = 0;
            
            if (~(*processed) & (*mcslen != 0) & (*mcelen != 0) & ~(u1)(*instring)) {
                if (*incomment) {
                    (*self.hl + *i) = Highlight.MLCOMMENT;
                    if (Externs.strncmp(*self.render + *i, mce, *mcelen) == 0) {
                        Externs.memset(*self.hl + *i, Highlight.MLCOMMENT, *mcelen);
                        i = *i + *mcelen;
                        incomment = 0;
                        prevsep = 0;
                        processed = 1;
                    } else {
                        i = *i + 1;
                        processed = 1;
                    };
                } else {
                    if (Externs.strncmp(*self.render + *i, mcs, *mcslen) == 0) {
                        Externs.memset(*self.hl + *i, Highlight.MLCOMMENT, *mcslen);
                        i = *i + *mcslen;
                        incomment = 1;
                        processed = 1;
                    };
                };
            };

            if (~(*processed) & (scs) != null & *instring == 0) {
                if (Externs.strncmp(*self.render + *i, scs, *scslen) == 0) {
                    Externs.memset(*self.hl + *i, Highlight.COMMENT, *self.rsize - *i);

                    return 0;
                };
            };

            if (~(*processed) & (syntaxFlags & Editor.Buffer.Syntax.Flags.HIGHLIGHTSTRINGS) != 0) {
                if (*instring != 0) {
                    (*self.hl + *i) = Highlight.STRING;

                    if (char == '\\' & *i + 1 < *self.rsize) {
                        (*self.hl + *i + 1) = Highlight.STRING;
                        i = *i + 2;
                    } else {
                        if (char == *instring) {
                            instring = 0;
                        };

                        i = *i + 1;
                        prevsep = 1;
                    };
                    processed = 1;
                } else {
                    if (char == 39 | char == '"') {
                        instring = char;
                        (*self.hl + *i) = Highlight.STRING;
                        i = *i + 1;
                        processed = 1;
                    };
                };
            };

            if (~(*processed) & (syntaxFlags & Editor.Buffer.Syntax.Flags.HIGHLIGHTNUMBERS) != 0) {
                if ((isdigit(char)) &
                    (*prevsep | *prevhl == Highlight.NUMBER) |
                    (char == '.' & *prevhl == Highlight.NUMBER)) {
                    (*self.hl + *i) = Highlight.NUMBER;
                    i = *i + 1;
                    prevsep = 0;
                    processed = 1;
                };
            };

            if (~(*processed) & *prevsep & keywords != null) {
                def oldi: const *i;

                def j: var i32;
                j = 0;
                while (*i == oldi & *(keywords + (*u8).SIZE * *j) != null) {
                    def word: const *(keywords + (*u8).SIZE * *j);
                    def klen: var i32;
                    klen = Externs.strlen(word);
                    def kwb: const *(word + (*klen - 1)) == '|';
                    if (kwb) { klen = *klen - 1; };

                    if (Externs.strncmp(*self.render + *i, word, *klen) == 0 &
                        issep(*(*self.render + *i + *klen))) {
                        if (kwb) {
                            Externs.memset(*self.hl + *i, Highlight.KEYWORDB, *klen);
                        } else {
                            Externs.memset(*self.hl + *i, Highlight.KEYWORDA, *klen);
                        };
                        i = *i + *klen;
                        prevsep = 0;
                        processed = 1;
                    };

                    j = *j + 1;
                };
            };

            if (*processed == 0) {
                prevsep = issep(char);
                i = *i + 1;
            };
        };

        def changed: const *self.opencomment != *incomment;       
        self.opencomment = *incomment;
        if (changed & (*self.idx + 1 < *rows.rows.len)) {
            updateSyntax(rows, Editor.Buffer.getRow(rows, *self.idx + 1), syntax);
        };

        return 0;
    };

    def insert: proc rows self aidx c syntaxFlags -> i32 {
        def idx: var i32;
        idx = aidx;

        if (*idx < 0 | *idx > *self.size) {
            idx = *self.size;
        };
        self.chars = Externs.realloc(*self.chars, *self.size + 2);
        Externs.memmove((*self.chars) + (*idx + 1), (*self.chars) + *idx, *self.size - *idx + 1);
        self.size = *self.size + 1;
        *self.chars + *idx = i8(*c.value);

        update(rows, self, syntaxFlags);

        return 0;
    };

    def append: proc rows self s len syntaxFlags -> i32 {
        self.chars = Externs.realloc(*self.chars, *self.size + len + 1);
        Externs.memcpy((*self.chars) + (*self.size), s, len);
        self.size = *self.size + len;
        *self.chars + *self.size = 0;

        update(rows, self, syntaxFlags);

        return 0;
    };

    def delete: proc rows self idx syntaxFlags -> i32 {
        if (idx < 0 | idx > *self.size - 1) {
            return 0;
        };
        Externs.memmove((*self.chars) + (idx), (*self.chars) + (idx + 1), *self.size - idx);
        self.size = *self.size - 1;

        update(rows, self, syntaxFlags);

        return 0;
    };

    def deinit: proc self -> i32 {
        Externs.free(*self.render);
        Externs.free(*self.chars);
        Externs.free(*self.hl);

        return 0;
    };
};

def getRow: proc self idx -> *ERow {
    return (*self.rows.items) + (idx * ERow.SIZE);
};

def deleteRow: proc self at -> i32 {
    if (at < 0 | at > *self.rows.len - 1) {
        return 0;
    };
    ERow.deinit(getRow(self, at));

    self.rows.orderedRemove(at);

    def j: var i32;
    j = at;
    while (*j < *self.rows.len - 1) {
        def row: const Editor.Buffer.getRow(self, *j);
        row.idx = *j;
        j = *j + 1;
    };


    return 0;
};

def toString: proc self buflen -> *u8 {
    def totlen: var i32;
    def j: var i32;

    totlen = 0;
    j = 0;

    while (*j < *self.rows.len) {
        totlen = *totlen + *getRow(self, *j).size + 1;

        j = *j + 1;
    };

    buflen = *totlen;

    def buf: var *u8;
    def p: var *u8;
    buf = Externs.malloc(*totlen);
    p = *buf;

    j = 0;

    while (*j < *self.rows.len) {
        def row: const getRow(self, *j);

        Externs.memcpy(*p, *row.chars, *row.size);
        p = (*p) + *row.size;
        (*p) = '\n';
        p = (*p) + u32(1);

        j = *j + 1;
    };

    return *buf;
};

def insertRow: proc self idx line len -> i32 {
    if (idx < 0 | idx > *self.rows.len) {
        return 0;
    };

    self.rows.insert(idx, ERow.init(line, len));

    def j: var i32;
    j = idx;
    while (*j < *self.rows.len - 1) {
        def row: const Editor.Buffer.getRow(self, *j);
        row.idx = *j;

        j = *j + 1;
    };

    Editor.Buffer.ERow.update(self, self.getRow(idx), self.syntax);

    return 0;
};

def cxToRx: proc row cx -> i32 {
    def rx: var i32;
    def j: var i32;
    rx = 0;
    j = 0;

    while (*j < cx) {
        if (*(*row.chars)[*j] == '\t') {
            rx = *rx + (Editor.Settings.TABSIZE - 1) - (*rx % Editor.Settings.TABSIZE);
        };
        rx = *rx + 1;
        j = *j + 1;
    };

    return *rx;
};

def rxToCx: proc row rx -> i32 {
    def currx: var i32;
    def cx: var i32;

    currx = 0;
    cx = 0;
    while (*cx < *row.size) {
        if (*(*row.chars + *cx) == '\t') {
            currx = *currx + (Editor.Settings.TABSIZE - 1) - (*currx % Editor.Settings.TABSIZE);
        };
        currx = *currx + 1;

        if (*currx > rx) {
           return *cx;
        };

        cx = *cx + 1;
    };

    return *cx;
};

def init: proc -> Buffer {
    def result: var Buffer;

    result.rows = std.ArrayList(ERow).init();
    result.fileName = null;
    result.dirty = 0;

    result.syntax.flags = 0;
    result.syntax.name = null;
    result.syntax.commentStart = null;
    result.syntax.mlCommentStart = null;
    result.syntax.mlCommentEnd = null;
    result.syntax.keywords = null;

    result.cx = 0;
    result.cy = 0;
    result.rx = 0;
    result.rowoff = 0;
    result.coloff = 0;

    return *result;
};

def Selection: struct {
    def enabled: prop u1;
    def startcy: prop u32;
    def startcx: prop u32;

    def start: proc cx cy -> i32 {

        return 0;
    };
};

def rows: prop std.ArrayList(ERow);
def fileName: prop *u8;
def dirty: prop u1;

def cx: prop u32;
def cy: prop u32;
def rx: prop u32;
def rowoff: prop u32;
def coloff: prop u32;
def selection: prop Selection;
